/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check API status
         * @description Returns a message if the API is up and running.
         *
         *     **Example:**
         *     ```bash
         *     curl -X GET \
         *       -H "Authorization: Bearer LONG_LIVED_ACCESS_TOKEN" \
         *       http://localhost:8123/api/
         *     ```
         *
         */
        get: operations["APIStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve current configuration */
        get: operations["APIConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve all states */
        get: operations["GetAllStates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/states/{entity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve state of a specific entity */
        get: operations["GetEntityState"];
        put?: never;
        /** Update or create state of a specific entity */
        post: operations["UpdateEntityState"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/services/{domain}/{service}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Call a service within a specific domain */
        post: operations["CallService"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all event listeners
         * @description Returns an array of event objects. Each event object contains event name and listener count.
         */
        get: operations["Events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history/period": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get historical state changes with default time range
         * @description Returns an array of state changes for the past day. Each object contains further details for the entities.
         *     This endpoint defaults to returning data from 1 day before the request time to the current time.
         *
         *     **Example:**
         *     ```bash
         *     curl -X GET \
         *       -H "Authorization: Bearer LONG_LIVED_ACCESS_TOKEN" \
         *       http://localhost:8123/api/history/period
         *     ```
         *
         */
        get: operations["HistoryPeriodDefault"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history/period/{timestamp}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get historical state changes with specific start time
         * @description Returns an array of state changes from the given timestamp. Each object contains further details for the entities.
         *
         *     **Example:**
         *     ```bash
         *     curl -X GET \
         *       -H "Authorization: Bearer LONG_LIVED_ACCESS_TOKEN" \
         *       http://localhost:8123/api/history/period/2023-01-01T00:00:00Z
         *     ```
         *
         */
        get: operations["HistoryPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logbook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get logbook entries with default time range
         * @description Returns an array of logbook entries for the past day.
         *     This endpoint defaults to returning entries from 1 day before the request time to the current time.
         *
         *     **Example:**
         *     ```bash
         *     curl -X GET \
         *       -H "Authorization: Bearer LONG_LIVED_ACCESS_TOKEN" \
         *       http://localhost:8123/api/logbook
         *     ```
         *
         */
        get: operations["LogbookEntriesDefault"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logbook/{timestamp}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get logbook entries with specific start time
         * @description Returns an array of logbook entries starting from the specified timestamp.
         *
         *     **Example:**
         *     ```bash
         *     curl -X GET \
         *       -H "Authorization: Bearer LONG_LIVED_ACCESS_TOKEN" \
         *       http://localhost:8123/api/logbook/2023-01-01T00:00:00Z
         *     ```
         *
         */
        get: operations["LogbookEntries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/error_log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get error log
         * @description Retrieve all errors logged during the current session of Home Assistant as a plaintext response.
         */
        get: operations["GetErrorLog"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/camera_proxy/{cameraEntityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get camera image
         * @description Returns the data (image) from the specified camera entity_id.
         */
        get: operations["GetCameraData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of calendars
         * @description Returns the list of calendar entities
         */
        get: operations["GetCalendars"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendars/{calendarEntityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get calendar events
         * @description Returns the list of calendar events for the specified calendar entity_id between the start and end times (exclusive).
         */
        get: operations["GetCalendarEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{event_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fire event
         * @description Fires an event with event_type. Some events require specific data, while others accept optional event data.
         *     Refer to the Home Assistant documentation for specific event requirements.
         *
         */
        post: operations["FireEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Render template
         * @description Render a Home Assistant template. See template docs for more information.
         *
         *     **Example:**
         *     ```bash
         *     curl -X POST \
         *       -H "Authorization: Bearer LONG_LIVED_ACCESS_TOKEN" \
         *       -H "Content-Type: application/json" \
         *       -d '{"template": "{{ states(\"sensor.temperature\") }}"}' \
         *       http://localhost:8123/api/template
         *     ```
         *
         */
        post: operations["RenderTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/core/check_config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check configuration
         * @description Trigger a check of configuration.yaml. No additional data needs to be passed in with this request. Needs config integration enabled.
         */
        post: operations["CheckConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/intent/handle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Handle intent
         * @description Handle an intent.
         */
        post: operations["HandleIntent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        State: {
            /** @description ID of the entity */
            entity_id?: string;
            /** @description Current state of the entity */
            state?: string;
            /** @description Entity attributes */
            attributes?: Record<string, never>;
            /**
             * Format: date-time
             * @description Last state change
             */
            last_changed?: string;
            /**
             * Format: date-time
             * @description Last state update
             */
            last_updated?: string;
        };
        ConfigResponse: {
            /** @description List of loaded components */
            components?: string[];
            /** @description Configuration directory path */
            config_dir?: string;
            /** @description Elevation */
            elevation?: number;
            /** @description Latitude */
            latitude?: number;
            /** @description Longitude */
            longitude?: number;
            /** @description Name of the location */
            location_name?: string;
            /** @description Time zone */
            time_zone?: string;
            unit_system?: {
                length?: string;
                mass?: string;
                temperature?: string;
                volume?: string;
            };
            /** @description Home Assistant version */
            version?: string;
        };
        EventObject: {
            /** @description Name of the event */
            event?: string;
            /** @description Number of event listeners */
            listener_count?: number;
        };
        HistoryStateChange: {
            /** @description Entity ID */
            entity_id?: string;
            /** @description State value */
            state?: string;
            /** @description State attributes */
            attributes?: Record<string, never>;
            /**
             * Format: date-time
             * @description Last time the state changed
             */
            last_changed?: string;
            /**
             * Format: date-time
             * @description Last time the state was updated
             */
            last_updated?: string;
        };
        LogbookEntry: {
            /** @description Entity ID */
            entity_id?: string;
            /** @description State */
            state?: string;
            /**
             * Format: date-time
             * @description When the event occurred
             */
            when?: string;
            /** @description Name of the entity */
            name?: string;
            /** @description Message describing the event */
            message?: string;
            /** @description Domain of the entity */
            domain?: string;
            /** @description Icon of the entity */
            icon?: string;
        };
        Service: {
            /** @description Domain of the service */
            domain?: string;
            services?: {
                [key: string]: {
                    description?: string;
                    fields?: {
                        [key: string]: {
                            description?: string;
                            example?: string;
                        };
                    };
                };
            };
        };
        CalendarObject: {
            /** @description Entity ID */
            entity_id?: string;
            /** @description Name of the calendar */
            name?: string;
        };
        CalendarEvent: {
            /** @description Summary of the event */
            summary?: string;
            /**
             * Format: date-time
             * @description Start time of the event
             */
            start?: string;
            /**
             * Format: date-time
             * @description End time of the event
             */
            end?: string;
            /** @description Description of the event */
            description?: string;
            /** @description Location of the event */
            location?: string;
            /** @description Unique ID of the event */
            uid?: string;
        };
        Error: {
            /** @description Error message */
            message?: string;
            /** @description Error code */
            code?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    APIStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API is running */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example API running. */
                        message?: string;
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    APIConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current configuration details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfigResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    GetAllStates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all entity states */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    GetEntityState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the entity to retrieve state for */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description State details of the specified entity */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Entity not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    UpdateEntityState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the entity to update or create */
                entity_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The new state value */
                    state: string;
                    /** @description State attributes to set */
                    attributes?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description State updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
            /** @description State created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    CallService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Domain of the service (e.g., light, switch, automation) */
                domain: string;
                /** @description Name of the service (e.g., turn_on, turn_off) */
                service: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Entity ID or comma-separated IDs to target */
                    entity_id?: string;
                } & {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Service called successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["State"][];
                };
            };
            /** @description Bad request, invalid service or parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Service or domain not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    Events: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of event listeners */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventObject"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    HistoryPeriodDefault: {
        parameters: {
            query?: {
                /** @description One or more entity IDs to filter on, comma separated. If not specified, all entities are returned. */
                filter_entity_id?: string;
                /** @description The end of the period in YYYY-MM-DDThh:mm:ssTZD format. If not specified, the current time will be used. */
                end_time?: string;
                /** @description Only return last_changed and state for states other than the first and last state. */
                minimal_response?: boolean;
                /** @description Skip returning attributes from the database. */
                no_attributes?: boolean;
                /** @description Only return significant state changes. */
                significant_changes_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of state changes in the past. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryStateChange"][][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    HistoryPeriod: {
        parameters: {
            query?: {
                /** @description One or more entity IDs to filter on, comma separated. If not specified, all entities are returned. */
                filter_entity_id?: string;
                /** @description The end of the period in YYYY-MM-DDThh:mm:ssTZD format. If not specified, the current time will be used. */
                end_time?: string;
                /** @description Only return last_changed and state for states other than the first and last state. */
                minimal_response?: boolean;
                /** @description Skip returning attributes from the database. */
                no_attributes?: boolean;
                /** @description Only return significant state changes. */
                significant_changes_only?: boolean;
            };
            header?: never;
            path: {
                /** @description The beginning of the period in YYYY-MM-DDThh:mm:ssTZD format (e.g., 2023-01-01T00:00:00Z). */
                timestamp: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of state changes in the past. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryStateChange"][][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    LogbookEntriesDefault: {
        parameters: {
            query?: {
                /** @description Filter on one entity. If not specified, all entities are included. */
                entity?: string;
                /** @description The end of the period in YYYY-MM-DDThh:mm:ssTZD format. If not specified, the current time will be used. */
                end_time?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of logbook entries. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogbookEntry"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    LogbookEntries: {
        parameters: {
            query?: {
                /** @description Filter on one entity. If not specified, all entities are included. */
                entity?: string;
                /** @description The end of the period in YYYY-MM-DDThh:mm:ssTZD format. If not specified, the current time will be used. */
                end_time?: string;
            };
            header?: never;
            path: {
                /** @description The beginning of the period in YYYY-MM-DDThh:mm:ssTZD format (e.g., 2023-01-01T00:00:00Z). */
                timestamp: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Array of logbook entries. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogbookEntry"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    GetErrorLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Plaintext response containing all logged errors. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    GetCameraData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the camera entity */
                cameraEntityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Camera image data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/jpeg": string;
                    "image/png": string;
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Camera not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    GetCalendars: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of calendar entities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarObject"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    GetCalendarEvents: {
        parameters: {
            query: {
                /** @description Start time of the events in YYYY-MM-DDThh:mm:ssTZD format */
                start: string;
                /** @description End time of the events in YYYY-MM-DDThh:mm:ssTZD format */
                end: string;
            };
            header?: never;
            path: {
                /** @description ID of the calendar entity */
                calendarEntityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of calendar events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CalendarEvent"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Calendar not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    FireEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Type of the event */
                event_type: string;
            };
            cookie?: never;
        };
        /** @description Event data (varies based on event type) */
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Event fired */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Event my_event fired. */
                        message?: string;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    RenderTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The template string to render
                     * @example {{ states("sensor.temperature") }}
                     */
                    template: string;
                };
            };
        };
        responses: {
            /** @description Returns the rendered template in plain text. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Bad request (invalid template) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    CheckConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Configuration check results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Contains error information if validation failed, null if successful */
                        errors?: null | string | string[];
                        /**
                         * @description Result of the configuration check
                         * @enum {string}
                         */
                        result?: "valid" | "invalid";
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    HandleIntent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The intent to handle
                     * @example HassLightTurnOn
                     */
                    intent: string;
                    /** @description Optional slots to fill intent parameters */
                    slots?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Returns the response for the handled intent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        speech?: {
                            /** @description Speech response in plain text */
                            plain?: string;
                        };
                        /**
                         * @description Type of response
                         * @enum {string}
                         */
                        response_type?: "action_done" | "error";
                    };
                };
            };
            /** @description Bad request (invalid intent) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
