 
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type IntegrationLight = LightPlatformSchema | LightPlatformSchema_1 | OtherPlatform | Item[];
/**
 * A list of entities to be included in the light group.
 * https://www.home-assistant.io/integrations/light.group/#entities
 */
export type Entities = (string | string[]) &
  {
    [k: string]: unknown;
  }[];
/**
 * The entity ID or list of entity IDs to test the numeric state against.
 * https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
 */
export type Entities1 = (string | string[]) &
  {
    [k: string]: unknown;
  }[];
/**
 * The entity ID or list of entity IDs to test the state against.
 * https://www.home-assistant.io/docs/scripts/conditions/#state-condition
 */
export type Entities2 = (string | string[]) &
  {
    [k: string]: unknown;
  }[];
export type State = string | number | boolean;
export type Weekday = "fri" | "mon" | "sat" | "sun" | "thu" | "tue" | "wed";
/**
 * The zone(s) conditionally check against for the given device tracker(s).
 * https://www.home-assistant.io/docs/scripts/conditions/#zone-condition
 */
export type ZoneEntities = (string | string[]) &
  {
    [k: string]: unknown;
  }[];
export type Condition =
  | string
  | AndCondition
  | AndShorthandCondition
  | DeviceCondition
  | NotCondition
  | NotShorthandCondition
  | NumericStateCondition
  | OrCondition
  | OrShorthandCondition
  | ShorthandCondition
  | StateCondition
  | SunCondition
  | TemplateCondition
  | TimeCondition
  | TriggerCondition
  | ZoneCondition;
export type EventType =
  | "automation_reloaded"
  | "automation_triggered"
  | "call_service"
  | "component_loaded"
  | "deconz_event"
  | "homeassistant_started"
  | "homeassistant_stop"
  | "logbook_entry"
  | "platform_discovered"
  | "scene_reloaded"
  | "service_executed"
  | "service_registered"
  | "service_removed"
  | "state_changed"
  | "tag_scanned"
  | "themes_updates"
  | "time_changed"
  | "user_added"
  | "user_removed"
  | "zha_event";
/**
 * The entity ID or list of entity IDs to monitor the numeric state for.
 * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
 */
export type Entities3 = (string | string[]) &
  {
    [k: string]: unknown;
  }[];
export type PersistentNotificationUpdateType = "added" | "removed" | "updated";
/**
 * The entity ID or list of entity IDs to monitor the state for.
 * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
 */
export type Entities4 = (string | string[]) &
  {
    [k: string]: unknown;
  }[];
export type AllowedMethods = "GET" | "HEAD" | "POST" | "PUT";
/**
 * The zone(s) to monitor for the given device tracker(s).
 * https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
 */
export type ZoneEntities1 = (string | string[]) &
  {
    [k: string]: unknown;
  }[];
export type Trigger =
  | CalendarTrigger
  | ConversationTrigger
  | DeviceTrigger
  | EventTrigger
  | GeolocationTrigger
  | HomeAssistantTrigger
  | MqttTrigger
  | NumericStateTrigger
  | PersistentNotificationTrigger
  | StateTrigger
  | SunTrigger
  | TagTrigger
  | TemplateTrigger
  | TimeTrigger
  | TimePatternTrigger
  | WebhookTrigger
  | ZoneTrigger;
export type Action =
  | string
  | AndCondition
  | AndShorthandCondition
  | DeviceCondition
  | NotCondition
  | NotShorthandCondition
  | NumericStateCondition
  | OrCondition
  | OrShorthandCondition
  | ShorthandCondition
  | StateCondition
  | SunCondition
  | TemplateCondition
  | TimeCondition
  | TriggerCondition
  | ZoneCondition
  | ChooseAction
  | DelayAction
  | DeviceAction
  | EventAction
  | IfAction
  | ParallelAction
  | RepeatAction
  | SceneAction
  | ServiceAction
  | SequenceAction
  | StopAction
  | WaitForTriggerAction
  | WaitTemplateAction
  | VariablesAction;
export type Item = LightPlatformSchema | LightPlatformSchema_1 | OtherPlatform;

export interface LightPlatformSchema {
  /**
   * The group light platform lets you combine multiple lights into one entity.
   * https://www.home-assistant.io/integrations/light.group/
   */
  platform: "group";
  /**
   * Set this to true if the group state should only turn on if all grouped entities are on, false otherwise.
   * https://www.home-assistant.io/integrations/light.group/#all
   */
  all?: boolean;
  entities: Entities;
  /**
   * The name of the light group. Defaults to “Light Group”.
   * https://www.home-assistant.io/integrations/light.group/#name
   */
  name?: string;
  /**
   * An ID that uniquely identifies this light group. If two lights have the same unique ID, Home Assistant will raise an error.
   * https://www.home-assistant.io/integrations/light.group/#unique_id
   */
  unique_id?: string;
  /**
   * By setting an entity namespace, all entities will be prefixed with that namespace.
   * https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
   */
  entity_namespace?: string;
  /**
   * Allow to change the polling interval if the platform uses a polling mechanism.
   * https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
   */
  scan_interval?: TimePeriodMap | (string | number);
}
export interface TimePeriodMap {
  /**
   * Number of days. This must be a number.
   */
  days?: string | number;
  /**
   * Number of hours. This must be a number.
   */
  hours?: string | number;
  /**
   * Number of milliseconds. This must be a number.
   */
  milliseconds?: string | number;
  /**
   * Number of minutes. This must be a number.
   */
  minutes?: string | number;
  /**
   * Number of seconds. This must be a number.
   */
  seconds?: string | number;
}
export interface LightPlatformSchema_1 {
  /**
   * The template platform creates lights that combine integrations and provides the ability to run scripts or invoke services for each of the on, off, and brightness commands of a light.
   * https://www.home-assistant.io/integrations/light.template
   */
  platform: "template";
  /**
   * List of lights.
   * https://www.home-assistant.io/integrations/fan.template/#lights
   */
  lights: {
    [k: string]: string | LightPlatformItem;
  };
  /**
   * By setting an entity namespace, all entities will be prefixed with that namespace.
   * https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
   */
  entity_namespace?: string;
  /**
   * Allow to change the polling interval if the platform uses a polling mechanism.
   * https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
   */
  scan_interval?: TimePeriodMap | (string | number);
}
export interface LightPlatformItem {
  /**
   * Defines a template to get the available state of the component. If the template returns true, the device is available.
   * https://www.home-assistant.io/integrations/light.template#availability_template
   */
  availability_template?: string;
  /**
   * Defines a template to get the list of supported effects. Must render a list.
   * https://www.home-assistant.io/integrations/light.template#effect_list_template
   */
  effect_list_template?: string;
  /**
   * Defines a template to get the currently selected effect.
   * https://www.home-assistant.io/integrations/light.template#effect_template
   */
  effect_template?: string;
  /**
   * Defines a template for the entity picture of the light.
   * https://www.home-assistant.io/integrations/light.template#entity_picture_template
   */
  entity_picture_template?: string;
  /**
   * Name to use in the frontend.
   * https://www.home-assistant.io/integrations/light.template#friendly_name
   */
  friendly_name?: string;
  /**
   * Defines a template to get the HS color of the light. Must render a tuple (hue, saturation).
   * https://www.home-assistant.io/integrations/light.template#hs_template
   */
  hs_template?: string;
  /**
   * Defines a template for an icon or picture, e.g., showing a different icon for different states.
   * https://www.home-assistant.io/integrations/light.template#icon_template
   */
  icon_template?: string;
  /**
   * Defines a template to get the brightness of the light.
   * https://www.home-assistant.io/integrations/light.template#level_template
   */
  level_template?: string;
  /**
   * Defines a template to get the max mireds value of the light.
   * https://www.home-assistant.io/integrations/light.template#max_mireds_template
   */
  max_mireds_template?: string;
  /**
   * Defines a template to get the min mireds value of the light.
   * https://www.home-assistant.io/integrations/light.template#min_mireds_template
   */
  min_mireds_template?: string;
  /**
   * Defines a template to get the RGB color of the light. Must render a tuple or a list (red, green, blue).
   * https://www.home-assistant.io/integrations/light.template#rgb_template
   */
  rgb_template?: string;
  /**
   * Defines a template to get the RGBW color of the light. Must render a tuple or a list (red, green, blue, white).
   * https://www.home-assistant.io/integrations/light.template#rgbw_template
   */
  rgbw_template?: string;
  /**
   * Defines a template to get the RGBWW color of the light. Must render a tuple or a list (red, green, blue, cold white, warm white).
   * https://www.home-assistant.io/integrations/light.template#rgbww_template
   */
  rgbww_template?: string;
  /**
   * Defines an action to run when the light is given a effect command.
   * https://www.home-assistant.io/integrations/light.template#set_effect
   */
  set_effect?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines an action to run when the light is given a hs color command. Available variables: `hs` as a tuple, `h` and `s`.
   * https://www.home-assistant.io/integrations/light.template#set_hs
   */
  set_hs?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines an action to run when the light is given a brightness command.
   * https://www.home-assistant.io/integrations/light.template#set_level
   */
  set_level?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines an action to run when the light is given an RGB color command. Available variables: `rgb` as a tuple, `r`, `g` and `b`.
   * https://www.home-assistant.io/integrations/light.template#set_rgb
   */
  set_rgb?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines an action to run when the light is given an RGBW color command. Available variables: `rgbw` as a tuple, `rgb` as a tuple, `r`, `g`, `b` and `w`.
   * https://www.home-assistant.io/integrations/light.template#set_rgbw
   */
  set_rgbw?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines an action to run when the light is given an RGBWW color command. Available variables: `rgbww` as a tuple, `rgb` as a tuple, `r`, `g`, `b`, `cw` and `ww`.
   * https://www.home-assistant.io/integrations/light.template#set_rgbww
   */
  set_rgbww?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines an action to run when the light is given a color temperature command.
   * https://www.home-assistant.io/integrations/light.template#set_temperature
   */
  set_temperature?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines a template to get if light supports transition.
   * https://www.home-assistant.io/integrations/light.template#supports_transition_template
   */
  supports_transition_template?: string;
  /**
   * Defines a template to get the color temperature of the light.
   * https://www.home-assistant.io/integrations/light.template#temperature_template
   */
  temperature_template?: string;
  /**
   * Defines an action to run when the light is turned off.
   * https://www.home-assistant.io/integrations/light.template#turn_off
   */
  turn_off:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * Defines an action to run when the light is turned on.
   * https://www.home-assistant.io/integrations/light.template#turn_on
   */
  turn_on:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * An ID that uniquely identifies this light. Set this to an unique value to allow customisation trough the UI.
   * https://www.home-assistant.io/integrations/light.template#unique_id
   */
  unique_id?: string;
  /**
   * Defines a template to get the state of the light.
   * https://www.home-assistant.io/integrations/light.template#value_template
   */
  value_template?: string;
}
export interface AndCondition {
  /**
   * Alias for the and condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Test multiple conditions in one condition statement. Passes if all embedded conditions are valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#and-condition
   */
  condition: "and";
  /**
   * Test multiple conditions in one condition statement. Passes if all embedded conditions are valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#and-condition
   */
  conditions:
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
}
export interface AndShorthandCondition {
  /**
   * Alias for the and condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Test multiple conditions in one condition statement. Passes if all embedded conditions are valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#and-condition
   */
  and:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
}
export interface DeviceCondition {
  /**
   * Alias for the device condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Device conditions encompass a set of properties that are defined by an integration.
   * In contrast to state conditions, device conditions are tied to a device and not necessarily an entity. To use a device trigger, set up an automation through the browser frontend.
   */
  condition?: "device";
  /**
   * The internal ID of the device to preform a conditional test on.
   */
  device_id: string;
  /**
   * The integration domain this device condition is provided by.
   */
  domain: string;
  [k: string]: unknown;
}
export interface NotCondition {
  /**
   * Alias for the not condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Test multiple conditions in one condition statement. Passes if all embedded conditions are not valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#not-condition
   */
  condition: "not";
  /**
   * Test multiple conditions in one condition statement. Passes if all embedded conditions are not valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#not-condition
   */
  conditions:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
}
export interface NotShorthandCondition {
  /**
   * Alias for the not condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Test multiple conditions in one condition statement. Passes if all embedded conditions are not valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#not-condition
   */
  not:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
}
export interface NumericStateCondition {
  /**
   * Alias for the numeric state condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * This type of condition attempts to parse the state of the specified entity as a number, and triggers if the value matches the thresholds.
   * https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
   */
  condition: "numeric_state";
  /**
   * Passes if the numeric state of the given entity (or entities) is above the given threshold.
   * https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
   */
  above?: string | number;
  /**
   * Passes if the numeric state of the given entity (or entities) is below the given threshold.
   * https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
   */
  below?: string | number;
  entity_id: Entities1;
  /**
   * An optional value template to use as the numeric state value.
   * https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
   */
  value_template?: string;
  /**
   * Use the value of a specific entity attribute to test against, instead of the entity state.
   * https://www.home-assistant.io/docs/scripts/conditions/#numeric-state-condition
   */
  attribute?: string;
}
export interface OrCondition {
  /**
   * Alias for the or condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Test multiple conditions in one condition statement. Passes if any embedded condition is valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#or-condition
   */
  condition: "or";
  /**
   * Test multiple conditions in one condition statement. Passes if any embedded condition is valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#or-condition
   */
  conditions:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
}
export interface OrShorthandCondition {
  /**
   * Alias for the or condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Test multiple conditions in one condition statement. Passes if any embedded condition is valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#or-condition
   */
  or:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
}
export interface ShorthandCondition {
  /**
   * Alias for the and condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * The template condition has a shorthand notation that can be used to make your scripts and automations shorter.
   * https://www.home-assistant.io/docs/scripts/conditions/#template-condition-shorthand-notation
   */
  condition: string;
}
export interface StateCondition {
  /**
   * Alias for the state condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * Tests if an entity (or entities) is in a specified state.
   * https://www.home-assistant.io/docs/scripts/conditions/#state-condition
   */
  condition: "state";
  entity_id: Entities2;
  /**
   * The state the entity (or entities) must have for this condition to pass.
   * https://www.home-assistant.io/docs/scripts/conditions/#state-condition
   */
  state: State[] | (string | number | boolean);
  /**
   * The amount of time the entity (or entities) state must be held until this condition passes.
   * https://www.home-assistant.io/docs/scripts/conditions/#state-condition
   */
  for?: TimePeriodMap | (string | number);
  /**
   * Use the value of a specific entity attribute to test against, instead of the entity state.
   * https://www.home-assistant.io/docs/scripts/conditions/#state-condition
   */
  attribute?: string;
  /**
   * How to match in case this condition has multiple entity listed: "all" all entities have to match the state, "any" if any of the entities match the state.
   * https://www.home-assistant.io/docs/scripts/conditions/#state-condition
   */
  match?: "all" | "any";
}
export interface SunCondition {
  /**
   * Alias for the sun condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * The sun state can be used to test if the sun has set or risen.
   * https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
   */
  condition: "sun";
  /**
   * Conditionally test if is currently is before sunrise or sunset.
   * Note that if only before key is used, the condition will be true from midnight until sunrise/sunset.
   * https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
   */
  before?: "sunrise" | "sunset";
  /**
   * Optional offset from the sunrise or sunset. For example "-00:45:00" will conditionally test 45 minutes before sunrise or sunset.
   * https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
   */
  before_offset?: TimePeriodMap | (string | number);
  /**
   * Conditionally test if is currently is after sunrise or sunset.
   * Note that if only after key is used, the condition will be true from sunset/sunrise until midnight.
   * https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
   */
  after?: "sunrise" | "sunset";
  /**
   * Optional offset from the sunrise or sunset. For example "-00:45:00" will conditionally test 45 minutes before sunrise or sunset.
   * https://www.home-assistant.io/docs/scripts/conditions/#sun-condition
   */
  after_offset?: TimePeriodMap | (string | number);
}
export interface TemplateCondition {
  /**
   * Alias for the template condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * The template condition tests if the given template renders a value equal to true. This is achieved by having the template result in a true boolean expression or by having the template render ‘true’.
   * https://www.home-assistant.io/docs/scripts/conditions/#template-condition
   */
  condition: "template";
  /**
   * The template to render for this condition. The condition will pass if the result is true.
   * https://www.home-assistant.io/docs/scripts/conditions/#template-condition
   */
  value_template?: string;
}
export interface TimeCondition {
  /**
   * Alias for the time condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * The time condition can test if it is after a specified time, before a specified time or if it is a certain day of the week.
   * https://www.home-assistant.io/docs/scripts/conditions/#time-condition
   */
  condition: "time";
  /**
   * Conditionally check if it is currently before a certain time of day.
   * Note that if only before key is used, the condition will be true from midnight until the specified time.
   * https://www.home-assistant.io/docs/scripts/conditions/#time-condition
   */
  before?: string;
  /**
   * Conditionally check if it is currently after a certain time of day.
   * Note that if only after key is used, the condition will be true from the specified time until midnight.
   * https://www.home-assistant.io/docs/scripts/conditions/#time-condition
   */
  after?: string;
  /**
   * Days of the week this condition can be valid.
   * https://www.home-assistant.io/docs/scripts/conditions/#time-condition
   */
  weekday?: Weekday[] | ("fri" | "mon" | "sat" | "sun" | "thu" | "tue" | "wed");
}
export interface TriggerCondition {
  /**
   * Alias for the trigger condition.
   */
  alias?: string;
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * The trigger condition can test if this automation was triggered by a specific trigger.
   * https://www.home-assistant.io/docs/scripts/conditions/#trigger-condition
   */
  condition: "trigger";
  /**
   * The ID (or IDs) of the triggers to test against if they have triggered this automation.
   * https://www.home-assistant.io/docs/scripts/conditions/#trigger-condition
   */
  id: string[] | number[] | (string | number);
}
export interface ZoneCondition {
  /**
   * Alias for the zone condition.
   */
  alias?: string;
  condition: "zone";
  /**
   * Every individual condition can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/conditions/#disabling-a-condition
   */
  enabled?: boolean;
  /**
   * The entity ID(s) of the device tracker(s).
   * https://www.home-assistant.io/docs/scripts/conditions/#zone-condition
   */
  entity_id: (string | string[]) &
    {
      [k: string]: unknown;
    }[];
  zone: ZoneEntities;
}
export interface ChooseAction {
  /**
   * Alias for the choose action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * This action allows you to select a sequence of other actions from a list of sequences.
   * https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
   */
  choose: string | ChooseActionItem | ChooseActionItem[];
  /**
   * An optional default sequence can be included which will be run if none of the sequences from the list are run.
   * https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
   */
  default?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
}
export interface ChooseActionItem {
  /**
   * Alias for this choose item.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Only preform the sequence of actions if this condition/these conditions match.
   * https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
   */
  conditions:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
  /**
   * The sequence of actions to be performed if the condition(s) match.
   * https://www.home-assistant.io/docs/scripts/#choose-a-group-of-actions
   */
  sequence:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
}
export interface DelayAction {
  /**
   * Alias for the delay action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * Delays are useful for temporarily suspending your script and start it at a later moment.
   * The time period to delay the executing of the current action sequence for.
   * https://www.home-assistant.io/docs/scripts/#delay
   */
  delay: TimePeriodMap | (string | number);
}
export interface DeviceAction {
  /**
   * Alias for the device action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * The internal ID of the device to execute an action on.
   * Device actions encompass a set of events that are defined by an integration.
   * In contrast to service calls, device actions are tied to a device and not necessarily an entity. To use a device action, set up an automation through the browser frontend.
   */
  device_id: string;
  /**
   * The integration domain this device trigger is provided by.
   */
  domain: string;
  [k: string]: unknown;
}
export interface EventAction {
  /**
   * Alias for the Event action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * The event name to fire.
   * This action allows you to fire an event. Events can be used for many things. It could trigger an automation or indicate to another integration that something is happening.
   * https://www.home-assistant.io/docs/scripts/#fire-an-event
   */
  event: string;
  /**
   * The event data to pass along.
   * https://www.home-assistant.io/docs/scripts/#fire-an-event
   */
  event_data?: {
    [k: string]: unknown;
  };
  /**
   * You can use templates directly in the event_data parameter, replace "event_data_template" with just "event_data".
   * https://www.home-assistant.io/docs/scripts/#fire-an-event
   */
  event_data_template?: {
    [k: string]: unknown;
  }[];
}
export interface IfAction {
  /**
   * Alias for the if action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * This action allows you to select a sequence of other actions from a list of sequences.
   * https://www.home-assistant.io/docs/scripts/#if-then
   */
  if:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | Condition[];
  /**
   * An optional default sequence can be included which will be run if none of the sequences from the list are run.
   * https://www.home-assistant.io/docs/scripts/#if-then
   */
  then:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
  /**
   * An optional default sequence can be included which will be run if none of the sequences from the list are run.
   * https://www.home-assistant.io/docs/scripts/#if-then
   */
  else?:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
}
export interface ParallelAction {
  /**
   * Alias for the parallel action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * The sequence of actions to run in parallel.
   * https://www.home-assistant.io/docs/scripts/#parallelizing-actions
   */
  parallel:
    | string
    | (
        | string
        | AndCondition
        | AndShorthandCondition
        | DeviceCondition
        | NotCondition
        | NotShorthandCondition
        | NumericStateCondition
        | OrCondition
        | OrShorthandCondition
        | ShorthandCondition
        | StateCondition
        | SunCondition
        | TemplateCondition
        | TimeCondition
        | TriggerCondition
        | ZoneCondition
        | ChooseAction
        | DelayAction
        | DeviceAction
        | EventAction
        | IfAction
        | ParallelAction
        | RepeatAction
        | SceneAction
        | ServiceAction
        | SequenceAction
        | StopAction
        | WaitForTriggerAction
        | WaitTemplateAction
        | VariablesAction
        | Action[]
      )[];
}
export interface RepeatAction {
  /**
   * Alias for the repeat action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * This action allows you to repeat a sequence of other actions.
   * https://www.home-assistant.io/docs/scripts/#repeat-a-group-of-actions
   */
  repeat: {
    /**
     * This form accepts a count value. The value may be specified by a template, in which case the template is rendered when the repeat step is reached.
     * https://www.home-assistant.io/docs/scripts/#counted-repeat
     */
    count?: string | number;
    /**
     * This repeat form accepts a list of items to iterate over. The list of items can be a pre-defined list, or a list created by a template.
     * https://www.home-assistant.io/docs/scripts/#for-each
     */
    for_each?:
      | string[]
      | {
          [k: string]: unknown;
        }
      | string;
    /**
     * The sequence of actions to be repeatedly performed in the script.
     * https://www.home-assistant.io/integrations/script/#sequence
     */
    sequence:
      | string
      | AndCondition
      | AndShorthandCondition
      | DeviceCondition
      | NotCondition
      | NotShorthandCondition
      | NumericStateCondition
      | OrCondition
      | OrShorthandCondition
      | ShorthandCondition
      | StateCondition
      | SunCondition
      | TemplateCondition
      | TimeCondition
      | TriggerCondition
      | ZoneCondition
      | ChooseAction
      | DelayAction
      | DeviceAction
      | EventAction
      | IfAction
      | ParallelAction
      | RepeatAction
      | SceneAction
      | ServiceAction
      | SequenceAction
      | StopAction
      | WaitForTriggerAction
      | WaitTemplateAction
      | VariablesAction
      | Action[];
    /**
     * This form accepts a list of conditions that are evaluated after each time the sequence is run. Therefore the sequence will always run at least once. The sequence will be executed until the condition(s) evaluate to true.
     * https://www.home-assistant.io/docs/scripts/#repeat-until
     */
    until?:
      | string
      | AndCondition
      | AndShorthandCondition
      | DeviceCondition
      | NotCondition
      | NotShorthandCondition
      | NumericStateCondition
      | OrCondition
      | OrShorthandCondition
      | ShorthandCondition
      | StateCondition
      | SunCondition
      | TemplateCondition
      | TimeCondition
      | TriggerCondition
      | ZoneCondition
      | Condition[];
    /**
     * This form accepts a list of conditions that are evaluated before each time the sequence is run. The sequence will be repeated as long as the condition(s) evaluate to true.
     * https://www.home-assistant.io/docs/scripts/#while-loop
     */
    while?:
      | string
      | AndCondition
      | AndShorthandCondition
      | DeviceCondition
      | NotCondition
      | NotShorthandCondition
      | NumericStateCondition
      | OrCondition
      | OrShorthandCondition
      | ShorthandCondition
      | StateCondition
      | SunCondition
      | TemplateCondition
      | TimeCondition
      | TriggerCondition
      | ZoneCondition
      | Condition[];
  };
}
export interface SceneAction {
  /**
   * Alias for the scene action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * Activate a scene.
   * https://www.home-assistant.io/docs/scripts/#activate-a-scene
   */
  scene: string;
  /**
   * Additional data for merely for use with the frontend. Has no functional effect.
   */
  metadata?: {
    [k: string]: unknown;
  };
}
export interface ServiceAction {
  /**
   * Service call alias.
   * https://www.home-assistant.io/docs/scripts/service-calls/
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * Legacy syntax, use "action" instead.
   */
  service?: {
    [k: string]: unknown;
  }[];
  /**
   * The most important action is to call an action.
   * https://www.home-assistant.io/docs/scripts/service-calls/
   */
  action?: string;
  /**
   * You can use templates directly in the service parameter, replace "service_template" with just "service".
   * https://www.home-assistant.io/docs/scripts/service-calls/#use-templates-to-decide-which-service-to-call
   */
  service_template?: {
    [k: string]: unknown;
  }[];
  /**
   * Specify other parameters beside the entity to target. For example, the light turn on service allows specifying the brightness.
   * https://www.home-assistant.io/docs/scripts/service-calls/#passing-data-to-the-service-call
   */
  data?:
    | {
        [k: string]: unknown;
      }
    | string;
  /**
   * You can use templates directly in the data parameter, replace "data_template" with just "data".
   * https://www.home-assistant.io/docs/scripts/service-calls/#use-templates-to-determine-the-attributes
   */
  data_template?: {
    [k: string]: unknown;
  }[];
  /**
   * The entity (or entities) to execute this service call on.
   * https://www.home-assistant.io/docs/scripts/service-calls
   */
  entity_id?: string[] | (null | string);
  /**
   * Defines the target (area(s), device(s) and entitie(s)) to execute this service call on.
   * https://www.home-assistant.io/docs/scripts/service-calls
   */
  target?:
    | {
        /**
         * The entity (or entities) to execute this service call on.
         * https://www.home-assistant.io/docs/scripts/service-calls
         */
        entity_id?: string[] | (null | string);
        /**
         * The device (or devices) to execute this service call on.
         * https://www.home-assistant.io/docs/scripts/service-calls
         */
        device_id?: string[] | string;
        /**
         * The area (or areas) to execute this service call on.
         * https://www.home-assistant.io/docs/scripts/service-calls
         */
        area_id?: string[] | string;
        /**
         * The floor (or floors) to execute this service call on.
         * https://www.home-assistant.io/docs/scripts/service-calls
         */
        floor_id?: string[] | string;
        /**
         * The labels (or labels) to execute this service call on.
         * https://www.home-assistant.io/docs/scripts/service-calls
         */
        label_id?: string[] | string;
      }
    | string;
  /**
   * Additional data for merely for use with the frontend. Has no functional effect.
   */
  metadata?: {
    [k: string]: unknown;
  };
  /**
   * Add a response_variable to pass a variable of key/value pairs back to an automation or script.
   * https://www.home-assistant.io/docs/scripts/service-calls/#use-templates-to-handle-response-data
   */
  response_variable?: string;
}
export interface SequenceAction {
  /**
   * Alias for the sequence action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * The sequence of actions to run in serial
   * https://www.home-assistant.io/docs/scripts/#grouping-actions
   */
  sequence:
    | string
    | AndCondition
    | AndShorthandCondition
    | DeviceCondition
    | NotCondition
    | NotShorthandCondition
    | NumericStateCondition
    | OrCondition
    | OrShorthandCondition
    | ShorthandCondition
    | StateCondition
    | SunCondition
    | TemplateCondition
    | TimeCondition
    | TriggerCondition
    | ZoneCondition
    | ChooseAction
    | DelayAction
    | DeviceAction
    | EventAction
    | IfAction
    | ParallelAction
    | RepeatAction
    | SceneAction
    | ServiceAction
    | SequenceAction
    | StopAction
    | WaitForTriggerAction
    | WaitTemplateAction
    | VariablesAction
    | Action[];
}
export interface StopAction {
  /**
   * Stop call alias.
   * https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Stop a automation or script sequence. Provide a text with a reason for stopping.
   * https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
   */
  stop: null | string;
  /**
   * Set to true, if we are stopping with an error / because of unexpected behavior
   * https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
   */
  error?: boolean;
  /**
   * Add a response_variable to pass a variable of key/value pairs back to an automation or script
   * https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
   */
  response_variable?: string;
}
export interface WaitForTriggerAction {
  /**
   * Alias for the wait for trigger action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * The trigger to wait for, before continuing execution of the script.
   * https://www.home-assistant.io/docs/scripts/#wait-for-trigger
   */
  wait_for_trigger?:
    | string
    | CalendarTrigger
    | ConversationTrigger
    | DeviceTrigger
    | EventTrigger
    | GeolocationTrigger
    | HomeAssistantTrigger
    | MqttTrigger
    | NumericStateTrigger
    | PersistentNotificationTrigger
    | StateTrigger
    | SunTrigger
    | TagTrigger
    | TemplateTrigger
    | TimeTrigger
    | TimePatternTrigger
    | WebhookTrigger
    | ZoneTrigger
    | Trigger[];
  /**
   * Set a timeout after which the script will continue its execution if the trigger has not occurred.
   * https://www.home-assistant.io/docs/scripts/#wait-for-trigger
   */
  timeout?: TimePeriodMap | (string | number);
  /**
   * Continue the execute of the action sequence on time out or not.
   * https://www.home-assistant.io/docs/scripts/#wait-for-trigger
   */
  continue_on_timeout?: boolean;
}
export interface CalendarTrigger {
  /**
   * Alias for the calendar trigger.
   */
  alias?: string;
  /**
   * Calendar trigger fires when a Calendar event starts or ends.
   * https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
   */
  trigger?: "calendar";
  /**
   * Legacy syntax, use "trigger: calendar" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * Trigger on start or end of the calendar event.
   * https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
   */
  event?: "end" | "start";
  /**
   * The entity ID to monitor the calendar events for.
   * https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
   */
  entity_id: string;
  /**
   * Optional time offset to fire a set time before or after event start/end.
   * https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
   */
  offset?: TimePeriodMap | (string | number);
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#calendar-trigger
   */
  id?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface ConversationTrigger {
  /**
   * Alias for the conversation pattern trigger.
   */
  alias?: string;
  /**
   * With the sentence trigger, you can match a sentence from a voice assistant.
   * https://www.home-assistant.io/docs/automation/trigger/#sentence-trigger
   */
  trigger?: "conversation";
  /**
   * Legacy syntax, use "trigger: conversation" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * A sentence or a list of sentences for this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#sentence-trigger
   */
  command: string[] | string;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#sentence-trigger
   */
  id?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface DeviceTrigger {
  /**
   * Alias for the device trigger.
   */
  alias?: string;
  /**
   * Device triggers encompass a set of events that are defined by an integration.
   * In contrast to state triggers, device triggers are tied to a device and not necessarily an entity. To use a device trigger, set up an automation through the browser frontend.
   * https://www.home-assistant.io/docs/automation/trigger/#device-triggers
   */
  trigger?: "device";
  /**
   * Legacy syntax, use "trigger: device" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * The internal ID of the device to trigger on
   * https://www.home-assistant.io/docs/automation/trigger/#device-triggers
   */
  device_id: string;
  /**
   * The integration domain this device trigger is provided by.
   * https://www.home-assistant.io/docs/automation/trigger/#device-triggers
   */
  domain: string;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#device-triggers
   */
  id?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface EventTrigger {
  /**
   * Alias for the event trigger.
   */
  alias?: string;
  /**
   * Fires when an event is being received. Events are the raw building blocks of Home Assistant. You can match events on just the event name or also require specific event data to be present.
   * https://www.home-assistant.io/docs/automation/trigger/#event-trigger
   */
  trigger?: "event";
  /**
   * Legacy syntax, use "trigger: event" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * Additional event context that has to match before triggering.
   * https://www.home-assistant.io/docs/automation/trigger/#event-trigger
   */
  context?: {
    [k: string]: unknown;
  };
  /**
   * Additional event data that has to match before triggering.
   * https://www.home-assistant.io/docs/automation/trigger/#event-trigger
   */
  event_data?: {
    [k: string]: unknown;
  };
  /**
   * The name of the event to listen for.
   * https://www.home-assistant.io/docs/automation/trigger/#event-trigger
   */
  event_type: string[] | EventType[] | string;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#event-trigger
   */
  id?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface GeolocationTrigger {
  /**
   * Alias for the geolocation trigger.
   */
  alias?: string;
  /**
   * Geolocation trigger fires when an entity is appearing in or disappearing from a zone.
   * https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
   */
  trigger?: "geo_location";
  /**
   * Legacy syntax, use "trigger: geo_location" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * Trigger when the entity leaves or enters the zone defined.
   * https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
   */
  event: "enter" | "leave";
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
   */
  id?: string;
  /**
   * The source is directly linked to one of the Geolocation platforms.
   * https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
   */
  source: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
  /**
   * The zone to trigger on when a entity is appearing in or disappearing from.
   * https://www.home-assistant.io/docs/automation/trigger/#geolocation-trigger
   */
  zone: string;
}
export interface HomeAssistantTrigger {
  /**
   * Alias for the home assistant trigger.
   */
  alias?: string;
  /**
   * This trigger fires when Home Assistant has started up or going to shut down.
   * https://www.home-assistant.io/docs/automation/trigger/#home-assistant-trigger
   */
  trigger?: "homeassistant";
  /**
   * Legacy syntax, use "trigger: homeassistant" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * Specified the event to listen to: Either the Home Assistant start or shutdown event.
   * https://www.home-assistant.io/docs/automation/trigger/#home-assistant-trigger
   */
  event: "shutdown" | "start";
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#home-assistant-trigger
   */
  id?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface MqttTrigger {
  /**
   * Alias for the mqtt trigger.
   */
  alias?: string;
  /**
   * Fires when a specific message is received on given MQTT topic
   * https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
   */
  trigger?: "mqtt";
  /**
   * Legacy syntax, use "trigger: mqtt" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * The default payload encoding is ‘utf-8’.
   * For images and other byte payloads use encoding: '' to disable payload decoding completely.
   * https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
   */
  encoding?: string;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
   */
  id?: string;
  /**
   * The payload to match on before triggering.
   * https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
   */
  payload?: string;
  /**
   * The matching QoS level of the state topic. Default is 0.
   * https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
   */
  qos?: number;
  /**
   * The MQTT topic to subscribe and listen to.
   * https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
   */
  topic: string;
  /**
   * Value template allows, for example, picking out a JSON key from the incoming MQTT message.
   * https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger
   */
  value_template?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface NumericStateTrigger {
  /**
   * Alias for the numeric state trigger.
   */
  alias?: string;
  /**
   * Fires when numeric value of an entity’s state crosses a given threshold.
   * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
   */
  trigger?: "numeric_state";
  /**
   * Legacy syntax, use "trigger: numeric_state" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  entity_id: Entities3;
  /**
   * Fire this trigger if the numeric state of the monitored entity (or entities) is changing from above to below the given threshold.
   * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
   */
  below?: string | number;
  /**
   * Fire this trigger if the numeric state of the monitored entity (or entities) is changing from below to above the given threshold.
   * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
   */
  above?: string | number;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
   */
  id?: string;
  /**
   * An optional value template to use as the numeric state value.
   * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
   */
  value_template?: string;
  /**
   * The amount of time this threshold must be held until this trigger fires.
   * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
   */
  for?: TimePeriodMap | (string | number);
  /**
   * Use the value of a specific entity attribute to trigger on, instead of the entity state.
   * https://www.home-assistant.io/docs/automation/trigger/#numeric-state-trigger
   */
  attribute?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface PersistentNotificationTrigger {
  /**
   * Alias for the persistent notification trigger.
   */
  alias?: string;
  /**
   * Persistent notification triggers are fired when a persistent_notification is added or removed that matches the configuration options.
   * https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
   */
  trigger?: "persistent_notification";
  /**
   * Legacy syntax, use "trigger: persistent_notification" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
   */
  id?: string;
  /**
   * Define the type of persistent notification to trigger on.
   * https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
   */
  update_type?: PersistentNotificationUpdateType[];
  /**
   * The notification ID to trigger on.
   * https://www.home-assistant.io/docs/automation/trigger/#persistent-notification-trigger
   */
  notification_id?: string;
}
export interface StateTrigger {
  /**
   * Alias for the state trigger.
   */
  alias?: string;
  /**
   * This trigger fires when the state of any of given entities changes.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  trigger?: "state";
  /**
   * Legacy syntax, use "trigger: state" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  entity_id: Entities4;
  /**
   * The amount of time the entity or entities state must be held until this trigger fires.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  for?: TimePeriodMap | (string | number);
  /**
   * The state the entity or entities had before changing to its new state.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  from?: {
    [k: string]: unknown;
  };
  /**
   * The state the entity or entities NOT had before changing to its new state.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  not_from?: {
    [k: string]: unknown;
  };
  /**
   * The state the entity or entities have changed to.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  to?: {
    [k: string]: unknown;
  };
  /**
   * The state the entity or entities did NOT changed to.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  not_to?: {
    [k: string]: unknown;
  };
  /**
   * Use the value of a specific entity attribute to trigger on, instead of the entity state.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  attribute?: string;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#state-trigger
   */
  id?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface SunTrigger {
  /**
   * Alias for the sun trigger.
   */
  alias?: string;
  /**
   * This trigger fires when the sun is setting or rising.
   * https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
   */
  trigger?: "sun";
  /**
   * Legacy syntax, use "trigger: device" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * The event to fire on, either on sunset or sunrise.
   * https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
   */
  event: "sunrise" | "sunset";
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
   */
  id?: string;
  /**
   * Optional offset from the sunrise or sunset. For example "-00:45:00" will trigger 45 minutes before sunrise or sunset.
   * https://www.home-assistant.io/docs/automation/trigger/#sun-trigger
   */
  offset?: TimePeriodMap | (string | number);
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface TagTrigger {
  /**
   * Alias for the tag trigger.
   */
  alias?: string;
  /**
   * This trigger fired when a tag is scanned.
   * https://www.home-assistant.io/docs/automation/trigger#tag-trigger
   */
  trigger?: "tag";
  /**
   * Legacy syntax, use "trigger: tag" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger#tag-trigger
   */
  id?: string;
  /**
   * Identifier of the tag. Use this to decide what to do.
   * https://www.home-assistant.io/docs/automation/trigger#tag-trigger
   */
  tag_id: string[] | string;
  /**
   * Device registry identifier of the device that scanned the tag. Use this to decide where to do it.
   * https://www.home-assistant.io/docs/automation/trigger#tag-trigger
   */
  device_id?: string[] | string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface TemplateTrigger {
  /**
   * Alias for the template trigger.
   */
  alias?: string;
  /**
   * Template triggers work by evaluating a template on every state change for all of the recognized entities. The trigger will fire if the state change caused the template to render ‘true’.
   * https://www.home-assistant.io/docs/automation/trigger/#template-trigger
   */
  trigger?: "template";
  /**
   * Legacy syntax, use "trigger: template" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#template-trigger
   */
  id?: string;
  /**
   * The template to render for this trigger. The event will fire is the result is true.
   * https://www.home-assistant.io/docs/automation/trigger/#template-trigger
   */
  value_template: string;
  /**
   * The amount of time the template must be resulting in true until this trigger fires.
   * https://www.home-assistant.io/docs/automation/trigger/#template-trigger
   */
  for?: TimePeriodMap | (string | number);
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface TimeTrigger {
  /**
   * Alias for the time trigger.
   */
  alias?: string;
  /**
   * The time trigger is configured to fire once at a specific point in time each day.
   * https://www.home-assistant.io/docs/automation/trigger/#time-trigger
   */
  trigger?: "time";
  /**
   * Legacy syntax, use "trigger: time" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * Time of day to trigger on, in HH:MM:SS, 24 hours clock format. For example: "13:30:00"
   * Also accepts input_datetime entities (e.g., input_datetime.start_of_day)
   */
  at: (string | string[]) &
    {
      [k: string]: unknown;
    }[];
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#time-trigger
   */
  id?: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface TimePatternTrigger {
  /**
   * Alias for the time pattern trigger.
   */
  alias?: string;
  /**
   * With the time pattern trigger, you can match if the hour, minute or second of the current time matches a specific value.
   * https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
   */
  trigger?: "time_pattern";
  /**
   * Legacy syntax, use "trigger: time_pattern" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
   */
  id?: string;
  /**
   * The hour or hours to trigger on.
   * You can prefix the value with a / to match whenever the value is divisible by that number. You can specify * to match any value.
   * https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
   */
  hours?: string;
  /**
   * The minute or minutes to trigger on.
   * You can prefix the value with a / to match whenever the value is divisible by that number. You can specify * to match any value.
   * https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
   */
  minutes?: string | number;
  /**
   * The second or seconds to trigger on.
   * You can prefix the value with a / to match whenever the value is divisible by that number. You can specify * to match any value.
   * https://www.home-assistant.io/docs/automation/trigger/#time-pattern-trigger
   */
  seconds?: string | number;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface WebhookTrigger {
  /**
   * Alias for the webhook trigger.
   */
  alias?: string;
  /**
   * Webhook trigger fires when a web request is made to the webhook endpoint.
   * https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
   */
  trigger?: "webhook";
  /**
   * Legacy syntax, use "trigger: webhook" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
   */
  id?: string;
  /**
   * The webhook ID to use, defines the endpoint: /api/webhook/<webhook_id>
   * https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
   */
  webhook_id: string;
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
  /**
   * Controls to only allow local requests to trigger the webhook.
   * https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
   */
  local_only?: boolean;
  /**
   * Controls to only allow requests with a valid API password to trigger the webhook.
   * https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
   */
  allowed_methods: AllowedMethods[];
}
export interface ZoneTrigger {
  /**
   * Alias for the zone trigger.
   */
  alias?: string;
  /**
   * Zone trigger fires when an entity is entering or leaving the zone. For zone automation to work, you need to have setup a device tracker platform that supports reporting GPS coordinates.
   * https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
   */
  trigger?: "zone";
  /**
   * Legacy syntax, use "trigger: zone" instead.
   */
  platform?: {
    [k: string]: unknown;
  }[];
  /**
   * Every individual trigger in an automation can be disabled, without removing it.
   * https://www.home-assistant.io/docs/automation/trigger/#disabling-a-trigger
   */
  enabled?: boolean;
  /**
   * An personal identifier for this trigger, that is passed into the trigger
   * variables when the automation triggers using this trigger.
   * https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
   */
  id?: string;
  /**
   * The entity ID(s) of the device tracker(s) to monitor on a given zone.
   * https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
   */
  entity_id: (string | string[]) &
    {
      [k: string]: unknown;
    }[];
  zone: ZoneEntities1;
  /**
   * Trigger when the entity leaves or enters the zone(s) defined.
   * https://www.home-assistant.io/docs/automation/trigger/#zone-trigger
   */
  event: "enter" | "leave";
  /**
   * This allows you to define variables that will be set when the trigger fires.
   * These can be used in the automation actions or conditions. Templates
   * can be used in these variables.
   * https://www.home-assistant.io/docs/automation/trigger#trigger-variables
   */
  variables?: {
    [k: string]: unknown;
  };
}
export interface WaitTemplateAction {
  /**
   * Alias for the wait action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * Wait until some things are complete.
   * https://www.home-assistant.io/docs/scripts/#wait
   */
  wait_template: string;
  /**
   * Set a timeout after which the script will continue its execution if the condition is not satisfied.
   * https://www.home-assistant.io/docs/scripts/#wait
   */
  timeout?: TimePeriodMap | (string | number);
  /**
   * Continue the execute of the action sequence on time out or not.
   * https://www.home-assistant.io/docs/scripts/#wait
   */
  continue_on_timeout?: boolean;
}
export interface VariablesAction {
  /**
   * Alias for the variables action.
   */
  alias?: string;
  /**
   * Every individual action can be disabled, without removing it.
   * https://www.home-assistant.io/docs/scripts/#disabling-an-action
   */
  enabled?: boolean;
  /**
   * Set it to true if you’d like to continue the action sequence, regardless of whether that action encounters an error.
   * https://www.home-assistant.io/docs/scripts/#continuing-on-error
   */
  continue_on_error?: boolean;
  /**
   * The variable command allows you to set/override variables that will be accessible by templates in actions after it.
   * https://www.home-assistant.io/docs/scripts/#variables
   */
  variables: {
    [k: string]: unknown;
  };
}
export interface OtherPlatform {
  /**
   * Platform domain
   */
  platform: string;
  /**
   * By setting an entity namespace, all entities will be prefixed with that namespace.
   * https://www.home-assistant.io/docs/configuration/platform_options/#entity-namespace
   */
  entity_namespace?: string;
  /**
   * Allow to change the polling interval if the platform uses a polling mechanism.
   * https://www.home-assistant.io/docs/configuration/platform_options/#scan-interval
   */
  scan_interval?: TimePeriodMap | (string | number);
  [k: string]: unknown;
}
